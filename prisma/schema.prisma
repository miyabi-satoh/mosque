// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider               = "zod-prisma-types"
  // 自動生成されたファイルが配置されるパス
  output                 = "../src/lib/schemas/zod"
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes       = false // default is true
  // createModelTypes       = false // default is true
  addInputTypeValidation = false // default is true
  addIncludeType         = false // default is true
  addSelectType          = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path}
}

enum UserRoleEnum {
  USER
  STAFF
  ADMIN

  @@map("UserRole")
}

model User {
  id          String       @id @unique
  username    String       @unique
  role        UserRoleEnum @default(USER)
  fullName    String?      @map("full_name")
  displayName String?      @map("display_name")
  email       String?
  code        String?      @unique
  avatar      String?
  lastLoginAt DateTime?    @map("last_login_at")

  auth_session   Session[]
  key            Key[]
  Message        Message[]
  channelCreated Channel[]       @relation("channelCreated")
  channelUpdated Channel[]       @relation("channelUpdated")
  ChannelMember  ChannelMember[]

  @@map("auth_users")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  temp_resources TempResource[]

  @@index([user_id])
  @@map("auth_sessions")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_keys")
}

enum ExamTypeEnum {
  ctest
  eiken
  kyote

  @@map("ExamType")
}

model Exam {
  examType  ExamTypeEnum @id @map("exam_type")
  name      String
  sortOrder Int          @map("sort_order")

  @@map("exams")
}

model Resource {
  id         String
  examType   ExamTypeEnum @map("exam_type")
  year       Int
  publisher  String
  grade      Int
  numOf      Int          @map("num_of")
  category   Int
  title      String
  shortTitle String       @map("short_title")
  path       String

  @@id([id, examType])
  @@index([examType])
  @@map("resources")
}

enum ResourceStateEnum {
  ok
  new

  @@map("ResourceState")
}

model TempResource {
  id         String
  sessionId  String            @map("session_id")
  session    Session           @relation(references: [id], fields: [sessionId], onDelete: Cascade)
  state      ResourceStateEnum
  examType   ExamTypeEnum      @map("exam_type")
  year       Int
  publisher  String
  grade      Int
  numOf      Int               @map("num_of")
  category   Int
  title      String
  shortTitle String            @map("short_title")
  path       String

  @@id([id, sessionId])
  @@index([examType])
  @@map("temp_resources")
}

model Link {
  id        String @id @default(cuid())
  url       String
  title     String
  sortOrder Int    @map("sort_order")

  @@map("links")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  // true: channelの表示そのものをmemberに限定する
  private     Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  createdBy String @map("created_by")
  creator   User   @relation(name: "channelCreated", references: [id], fields: [createdBy], onDelete: Cascade)

  updatedBy String @map("updated_by")
  updator   User   @relation(name: "channelUpdated", references: [id], fields: [updatedBy], onDelete: Cascade)

  messages      Message[]
  ChannelMember ChannelMember[]

  @@map("channels")
}

model ChannelMember {
  channelId String
  userId    String

  channel Channel @relation(references: [id], fields: [channelId], onDelete: Cascade)
  user    User    @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([channelId, userId])
  @@map("channel_members")
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  channelId String  @map("channel_id")
  channel   Channel @relation(references: [id], fields: [channelId], onDelete: Cascade)

  @@map("messages")
}
