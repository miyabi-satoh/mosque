// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider               = "zod-prisma-types"
  // 自動生成されたファイルが配置されるパス
  output                 = "../src/lib/schemas/zod"
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes       = false // default is true
  // createModelTypes       = false // default is true
  addInputTypeValidation = false // default is true
  addIncludeType         = false // default is true
  addSelectType          = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path}
}

enum UserRoleEnum {
  USER
  STAFF
  ADMIN
  RETIRED

  @@map("UserRole")
}

model User {
  id             String       @id @unique
  username       String       @unique
  hashedPassword String       @map("hashed_password")
  role           UserRoleEnum @default(USER)
  fullName       String?      @map("full_name")
  displayName    String?      @map("display_name")
  email          String?
  code           String?      @unique
  avatar         String?
  lastLoginAt    DateTime?    @map("last_login_at")

  sessions       Session[]
  Message        Message[]
  channelCreated Channel[]       @relation("channelCreated")
  channelUpdated Channel[]       @relation("channelUpdated")
  ChannelMember  ChannelMember[]

  @@map("auth_users")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
  @@map("auth_sessions")
}

model Archive {
  id          String @id @default(cuid())
  /// @zod.string.min(1)
  title       String
  /// @zod.string.min(1).toLowerCase()
  path        String @unique
  /// @zod.string.min(1)
  root        String
  depth       Int    @default(4)
  sortOrder   Int    @default(0) @map("sort_order")
  description String @default("")

  items ArchiveItem[]

  @@map("archives")
}

model ArchiveItem {
  id         String  @id @default(cuid())
  archiveId  String
  archive    Archive @relation(references: [id], fields: [archiveId], onDelete: Cascade)
  path       String
  year       Int?
  strYear    String? @map("str_year")
  grade      Int?
  strGrade   String? @map("str_grade")
  section    Int?
  strSection String? @map("str_section")
  title      String
  published  Boolean @default(false)

  @@unique([archiveId, path])
  @@map("archive_items")
}

model Link {
  id          String @id @default(cuid())
  url         String
  title       String
  sortOrder   Int    @default(0) @map("sort_order")
  description String @default("")

  @@map("links")
}

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  // true: channelの表示そのものをmemberに限定する
  private     Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  createdBy String @map("created_by")
  creator   User   @relation(name: "channelCreated", references: [id], fields: [createdBy], onDelete: Cascade)

  updatedBy String @map("updated_by")
  updator   User   @relation(name: "channelUpdated", references: [id], fields: [updatedBy], onDelete: Cascade)

  messages      Message[]
  ChannelMember ChannelMember[]

  @@map("channels")
}

model ChannelMember {
  channelId String
  userId    String

  channel Channel @relation(references: [id], fields: [channelId], onDelete: Cascade)
  user    User    @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([channelId, userId])
  @@map("channel_members")
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  channelId String  @map("channel_id")
  channel   Channel @relation(references: [id], fields: [channelId], onDelete: Cascade)

  @@map("messages")
}
