// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider               = "zod-prisma-types"
  // 自動生成されたファイルが配置されるパス
  output                 = "../src/lib/schemas/zod"
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  createInputTypes       = false // default is true
  // createModelTypes       = false // default is true
  addInputTypeValidation = false // default is true
  addIncludeType         = false // default is true
  addSelectType          = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path}
}

enum UserRoleEnum {
  USER
  STAFF
  ADMIN

  @@map("UserRole")
}

model User {
  id          String       @id @unique
  username    String       @unique
  role        UserRoleEnum @default(USER)
  fullName    String?      @map("full_name")
  displayName String?      @map("display_name")
  email       String?
  code        String?      @unique

  auth_session Session[]
  key          Key[]

  @@map("auth_users")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  temp_resources TempResource[]

  @@index([user_id])
  @@map("auth_sessions")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_keys")
}

enum ExamTypeEnum {
  ctest
  eiken
  kyote

  @@map("ExamType")
}

model Exam {
  examType  ExamTypeEnum @id @map("exam_type")
  name      String
  sortOrder Int          @map("sort_order")

  @@map("exams")
}

model Resource {
  id         String
  examType   ExamTypeEnum @map("exam_type")
  year       Int
  publisher  String
  grade      Int
  numOf      Int          @map("num_of")
  category   Int
  title      String
  shortTitle String       @map("short_title")
  path       String

  @@id([id, examType])
  @@index([examType])
  @@map("resources")
}

enum ResourceStateEnum {
  ok
  new

  @@map("ResourceState")
}

model TempResource {
  id         String
  sessionId  String            @map("session_id")
  session    Session           @relation(references: [id], fields: [sessionId], onDelete: Cascade)
  state      ResourceStateEnum
  examType   ExamTypeEnum      @map("exam_type")
  year       Int
  publisher  String
  grade      Int
  numOf      Int               @map("num_of")
  category   Int
  title      String
  shortTitle String            @map("short_title")
  path       String

  @@id([id, sessionId])
  @@index([examType])
  @@map("temp_resources")
}

model Link {
  id        String @id @default(cuid())
  url       String
  title     String
  sortOrder Int    @map("sort_order")

  @@map("links")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  username  String
  password  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  message   String
  username  String
  password  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  postId String @map("post_id")
  post   Post   @relation(references: [id], fields: [postId], onDelete: Cascade)

  @@map("comments")
}
